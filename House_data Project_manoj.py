# -*- coding: utf-8 -*-
"""House_data Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePap0ez4klrgNwdl-a9onPSHjVAQBoJN

House_Data Project
"""

#Load Necessary Libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
House_data = pd.read_csv('/content/raw_house_data.csv')

House_data

House_data.head(5)

House_data.columns

for column in House_data.columns:
  print(column)

#Finding Data Types
House_data.dtypes

#Describe the Data
House_data.describe()

House_data.info()

House_data.shape

#Remove Duplicates
House_data=House_data.drop_duplicates()

House_data.count()

# Convert relevant columns to numeric
House_data['bathrooms'] = pd.to_numeric(House_data['bathrooms'], errors='coerce')
House_data['sqrt_ft'] = pd.to_numeric(House_data['sqrt_ft'], errors='coerce')
House_data['garage'] = pd.to_numeric(House_data['garage'], errors='coerce')
House_data['HOA'] = pd.to_numeric(House_data['HOA'], errors='coerce')

# Handle missing values
House_data['lot_acres'].fillna(House_data['lot_acres'].median(), inplace=True)
House_data['bathrooms'].fillna(House_data['bathrooms'].median(), inplace=True)
House_data['sqrt_ft'].fillna(House_data['sqrt_ft'].median(), inplace=True)
House_data['garage'].fillna(0, inplace=True)  # Assume missing garage data indicates no garage
House_data['HOA'].fillna(0, inplace=True)  # Assume missing HOA data indicates no HOA fees

# Save the cleaned DataFrame to a CSV file
House_data.to_csv('clean_house_data.csv', index=False)

# Histogram


# Plot: Distribution of Sold Prices
plt.figure(figsize=(8, 6))
sns.histplot(House_data['sold_price'], bins=30, kde=True, color='blue')
plt.title('Distribution of Sold Prices')
plt.xlabel('Sold Price')
plt.ylabel('Frequency')
plt.savefig('sold_price_distribution.png')
plt.show()

#Box Plot: Bathrooms vs. Sold Price

plt.figure(figsize=(8, 6))
sns.boxplot(x='bathrooms', y='sold_price', data=House_data, palette='coolwarm')
plt.title('Bathrooms vs. Sold Price')
plt.xlabel('Number of Bathrooms')
plt.ylabel('Sold Price')
plt.savefig('bathrooms_vs_sold_price.png')
plt.show()

# Bar Graph: Average Sold Price by Number of Bedrooms
plt.figure(figsize=(8, 6))
avg_price_by_bedrooms = House_data.groupby('bedrooms')['sold_price'].mean().sort_index()
avg_price_by_bedrooms.plot(kind='bar', color='purple')
plt.title('Average Sold Price by Number of Bedrooms')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Average Sold Price')
plt.savefig('avg_price_by_bedrooms.png')
plt.show()

#Histogram: Distribution of Sold Prices

plt.figure(figsize=(8, 6))
sns.histplot(House_data['sold_price'], bins=30, kde=True, color='blue')
plt.title('Distribution of Sold Prices')
plt.xlabel('Sold Price')
plt.ylabel('Frequency')
plt.savefig('sold_price_distribution.png')
plt.show()

# Calculate correlation matrix
numeric_House_data = House_data.select_dtypes(include=['float64', 'int64'])

# Calculate the correlation matrix
correlation_matrix = numeric_House_data.corr()

# Set the figure size
plt.figure(figsize=(10, 8))

# Create the heatmap with annotations
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', vmin=-1, vmax=1)

# Add title
plt.title('Correlation Heatmap')

# Save the heatmap
plt.savefig('correlation_heatmap.png')

# Show the plot
plt.show()

# Scatter Plot
# Plot: Square Footage vs. Sold Price
plt.figure(figsize=(8, 6))
sns.scatterplot(x='sqrt_ft', y='sold_price', data=House_data, alpha=0.6, color='orange')
plt.title('Square Footage vs. Sold Price')
plt.xlabel('Square Footage')
plt.ylabel('Sold Price')
plt.savefig('sqrt_ft_vs_sold_price.png')
plt.show()

#Pair Plot: Relationships Between Key Features
sns.pairplot(House_data[['sold_price', 'bedrooms', 'bathrooms', 'sqrt_ft', 'lot_acres']], diag_kind='kde', corner=True)
plt.suptitle('Pair Plot of Key Features', y=1.02)
plt.savefig('pair_plot.png')
plt.show()